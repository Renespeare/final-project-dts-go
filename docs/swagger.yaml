basePath: /
definitions:
  models.Comment:
    properties:
      created_at:
        type: string
      id:
        type: integer
      message:
        type: string
      photo:
        $ref: '#/definitions/models.Photo'
      photo_id:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.Photo:
    properties:
      caption:
        type: string
      created_at:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.SocialMedia:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      social_media_url:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.User:
    properties:
      age:
        type: integer
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      photos:
        items:
          $ref: '#/definitions/models.Photo'
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: mridhor08@gmail.com
    name: API support
  description: This is a API similar to blog for final project DTS Go
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  version: "1.0"
paths:
  /comments:
    get:
      consumes:
      - application/json
      description: Get details of all comment with given photo id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      summary: Get all comment
      tags:
      - comments
    post:
      consumes:
      - application/json
      description: Create comment corresponding to the input
      parameters:
      - description: create comment
        in: body
        name: models.Comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      summary: Create comment
      tags:
      - comments
  /comments/{Id}:
    get:
      consumes:
      - application/json
      description: Get details of comment corresponding to the input Id
      parameters:
      - description: ID of the comment
        in: path
        name: Id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      summary: Get details for a given Id
      tags:
      - comments
  /comments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the comment corresponding to the input Id
      parameters:
      - description: ID of the comment to be deleted
        in: path
        name: Id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete comment identified by the given Id
      tags:
      - comments
    put:
      consumes:
      - application/json
      description: Update the comment corresponding to the input Id
      parameters:
      - description: ID of the comment to be updated
        in: path
        name: Id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      summary: Update comment identified by the given Id
      tags:
      - comments
  /photos:
    get:
      consumes:
      - application/json
      description: Get details of all photo
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      summary: Get all photo
      tags:
      - photos
    post:
      consumes:
      - application/json
      description: Create photo corresponding to the input
      parameters:
      - description: create photo
        in: body
        name: models.Photo
        required: true
        schema:
          $ref: '#/definitions/models.Photo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      summary: Create photo
      tags:
      - photos
  /photos/{Id}:
    get:
      consumes:
      - application/json
      description: Get details of photo corresponding to the input Id
      parameters:
      - description: ID of the photo
        in: path
        name: Id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      summary: Get details for a given Id
      tags:
      - photos
  /photos/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the photo corresponding to the input Id
      parameters:
      - description: ID of the photo to be deleted
        in: path
        name: Id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete photo identified by the given Id
      tags:
      - photos
    put:
      consumes:
      - application/json
      description: Update the photo corresponding to the input Id
      parameters:
      - description: ID of the photo to be updated
        in: path
        name: Id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      summary: Update photo identified by the given Id
      tags:
      - photos
  /social_media:
    get:
      consumes:
      - application/json
      description: Get details of all social media
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SocialMedia'
      summary: Get all social media
      tags:
      - social_media
    post:
      consumes:
      - application/json
      description: Create social media corresponding to the input
      parameters:
      - description: create social media
        in: body
        name: models.SocialMedia
        required: true
        schema:
          $ref: '#/definitions/models.SocialMedia'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SocialMedia'
      summary: Create social media
      tags:
      - social_media
  /social_media/{Id}:
    get:
      consumes:
      - application/json
      description: Get details of social media corresponding to the input Id
      parameters:
      - description: ID of the social media
        in: path
        name: Id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SocialMedia'
      summary: Get details for a given Id
      tags:
      - social_media
  /social_media/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the social media corresponding to the input Id
      parameters:
      - description: ID of the social media to be deleted
        in: path
        name: Id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete social media identified by the given Id
      tags:
      - social_media
    put:
      consumes:
      - application/json
      description: Update the social media corresponding to the input Id
      parameters:
      - description: ID of the social media to be updated
        in: path
        name: Id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SocialMedia'
      summary: Update social media identified by the given Id
      tags:
      - social_media
  /users/login:
    post:
      consumes:
      - application/json
      description: User can login with email and password
      parameters:
      - description: user login
        in: body
        name: models.User
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Login user
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Regiter new user
      parameters:
      - description: user register
        in: body
        name: models.User
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
      summary: Register new user
      tags:
      - users
swagger: "2.0"
